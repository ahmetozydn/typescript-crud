import { IResult } from '../Interfaces/IResult';
import { Post } from '../Models/posts'

type types = "undefined" | "invalid"

export class Pagination {
  private limit: number;
  private pageIndex: number;

  constructor(pageIndex: any, limit: number) {
    this.pageIndex = pageIndex
    this.limit = limit
  }
  // check if page-index in the query param is undefined or invalid
  async isParamValid(){ 
    let dataType: types
    if (this.pageIndex == undefined) {
      dataType = "undefined"
      return dataType
    } else if (this.pageIndex > await this.getTotal() || this.pageIndex < 1 || isNaN(this.pageIndex)) {
      dataType = "invalid"
      return dataType
    }
    this.pageIndex = this.pageIndex // the index is a number, then assign it
  }

  async getPage() {
    const items = await Post.find()
      .sort({ createdAt: -1 }) // id is automatically generated by mongodb so posts requested according to createdAt
      .skip((this.pageIndex - 1) * this.limit) // first post, get posts by index
      .limit(this.limit); // last post

    const total = await this.getTotal();

    const result: IResult = {
      total: total,
      limit: this.limit,
      posts: items
    }
    return result
  }

  getLimit(){
    return this.limit;
  }

  async getTotal(): Promise<number> {
    const total = await Post.countDocuments();
    return Math.ceil(total / this.limit);
  }
}